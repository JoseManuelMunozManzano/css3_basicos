/** VARIABLES */

:root {
  --text-color: #1D1D1F;
  --text-color-claro: #86868B;
  --color-enlaces: #06C;
  --color-background: #FAFAFA;
}

/** GENERALES */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: Arial, Helvetica, sans-serif;
}

body {
  background: var(--color-background);
}

html {
  /* Al hacer click en los enlaces el scroll se hace de forma pausada */
  scroll-behavior: smooth;  
}

a {
  text-decoration: none;
}

h1, h2, h3 {
  line-height: 1.2;
  font-weight: 600;
  color: var(--text-color);
  text-align: center;
}

h1 {
  font-size: 48px;  
  margin-top: 10px;
}

h2 {
  font-size: 24px;
}

h3 {
  font-size: 21px;
  font-weight: 400;
  color: var(--text-color-claro);
  margin-top: .5em;
}

img {
  width: 100%;  
}

section {
  position: relative;
  width: 100%;
  height: 100vh;
}

.text-container {
  /* Más abajo, en los estilos de .grid div {} usamos flexbox.
     Lo distribuimos en columnas. */
  flex-direction: column;
}

.enlace-info {
  font-size: 21px;
  margin-top: 30px;
  color: var(--color-enlaces)
}

.enlace-info:hover {
  text-decoration: underline;
}

/** ESTILOS GRID */
/* Vamos a trabajar con una grid de 12 columnas, cosa que es muy común para poder situar los elementos de una forma cómoda */
/* En cada sección iremos editando ciertos estilos para dejar el diseño como queramos. */

.grid {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: 20px;

  /* Para cada contenedor con esta clase, la altura será el 100% del contenedor */
  height: 100%;
}

/* Los elementos dentro del grid (los hijos) van a tener una disposición flex. Con eso podemos bajarlos (dirección de column), etc. */
.grid div {
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Estilos de span. Es muy común, dentro del grid, crear clases para expandir columnas o filas  */
.span5 {
  grid-column: span 5;
}

.span6 {
  grid-column: span 6;
}

.span7 {
  grid-column: span 7;
}

.span9 {
  grid-column: span 9;
}

.span12 {
  grid-column: span 12;
}

/** MENU DE NAVEGACION */

nav {
  /* Indicamos que la posición del nav es fija en la parte superior */
  position: fixed;
  top: 0;
  left: 0;

  /* Para que se vea bien, no olvidar darle tamaño y ponerlo por encima de la imagen */
  width: 100%;
  height: 44px;
  z-index: 3;

  background: rgba(0, 0, 0, 0.8);
}

nav .enlaces {
  position: relative;

  /* Para que se acople al contenedor */
  height: 100%;

  padding: 0 22px;

  /* Para que se centre el contenido */
  margin: 0 auto;

  max-width: 980px;

  /* Distribuimos los elementos usando flexbox */
  display: flex;
  justify-content: space-between;
  align-items: center;
}

nav .enlaces img {
  width: 16px;
}

nav .enlaces a {
  color: #F5F5F7;
  font-size: 14px;
  padding: 0 10px;
  opacity: .8;
  cursor: pointer;
  transition: all .3s;
}

nav .enlaces a:hover {
  opacity: 1;
}

/** HEADER */

header {
  width: 100%;
  /* 44px porque el nav tiene un height de 44px. Así evito que me aparezca el scroll */
  height: calc(100vh - 44px);
  margin: 44px 0 0 0;
  background: #F2F2F2;
}

header img {
  width: 85%;
}

/* Recordar que aquí estamos usando flexbox */
header .text-container {
  padding: 30px 0 0 0;
  justify-content: flex-end !important;
}

/* Recordar que aquí estamos usando flexbox */
header .img-container {
  /* Bajamos la imagen hasta la parte inferior de la página web */
  align-items: flex-end !important;
}

/** SERVICIOS */

/* Recordar que en nuestros estilos generales indicamos que la altura de todas las section fuera 100vh y un position: relative,
   para poder usar pseudoelementos.
*/
.service {
  background: url(img/image2.jpg);
  background-size: cover;
  background-position: center;
  background-attachment: fixed;
}

/* Como el contenedor principal tiene un position: relative, ahora, indicando position: absolute, lo puede ubicar donde quiera */
/* Esto es un overlay */
.service::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.95)
}

/* Editamos la grid para que esté un poco más contraida, y centramos el contenido */
.service .grid {
  width: 85%;
  margin: 0 auto;
}

.service .contenedor {
  flex-direction: column;
  z-index: 1;
}

.service img {
  width: 250px;
  height: 250px;
  margin: 25px 0;
}

.service .text-container {
  /* Para que el texto ocupe dos líneas */
  width: 60%;

  text-align: center;
}

.service .text-container h2 {
  color: #FFF;
  font-size: 28px;
  font-weight: 400;
}

/** PRODUCTOS */

/*? IPAD */

.ipad {
  background: #FFF;
}

.ipad img {
  height: 85%;
  object-fit: cover;
  object-position: left;
}

.ipad .text-container {
  /* Empieza en la columna 2 y termina en la 4 */
  grid-column: 2 / 4;
  /* Como el padre tiene flexbox, lo usamos para posicional el elemento al comienzo */
  align-items: flex-start;
}

/*? WATCH */

.watch {
  padding: 30px 50px 0 50px;
}

.watch .text-container img {
  width: 100px;
}

/*? AIRPODS */

.airpods {
  /* La sección tiene un height de 100vh y aquí le estamos diciendo que sea automático.
     Esto es porque 100vh es demasiado grande, y con auto indicamos que el height del contenedor sea lo que ocupan sus hijos. */
  height: auto;
}
